// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aemiralfath/IH-Userland-Onboard/datastore (interfaces: UserStore)

// Package mock_datastore is a generated GoMock package.
package mock_datastore

import (
	context "context"
	datastore "github.com/aemiralfath/IH-Userland-Onboard/datastore"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUserStore is a mock of UserStore interface
type MockUserStore struct {
	ctrl     *gomock.Controller
	recorder *MockUserStoreMockRecorder
}

// MockUserStoreMockRecorder is the mock recorder for MockUserStore
type MockUserStoreMockRecorder struct {
	mock *MockUserStore
}

// NewMockUserStore creates a new mock instance
func NewMockUserStore(ctrl *gomock.Controller) *MockUserStore {
	mock := &MockUserStore{ctrl: ctrl}
	mock.recorder = &MockUserStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserStore) EXPECT() *MockUserStoreMockRecorder {
	return m.recorder
}

// AddNewUser mocks base method
func (m *MockUserStore) AddNewUser(arg0 context.Context, arg1 *datastore.User) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewUser", arg0, arg1)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNewUser indicates an expected call of AddNewUser
func (mr *MockUserStoreMockRecorder) AddNewUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewUser", reflect.TypeOf((*MockUserStore)(nil).AddNewUser), arg0, arg1)
}

// ChangePassword mocks base method
func (m *MockUserStore) ChangePassword(arg0 context.Context, arg1 *datastore.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangePassword indicates an expected call of ChangePassword
func (mr *MockUserStoreMockRecorder) ChangePassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockUserStore)(nil).ChangePassword), arg0, arg1)
}

// CheckUserEmailExist mocks base method
func (m *MockUserStore) CheckUserEmailExist(arg0 context.Context, arg1 string) (*datastore.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserEmailExist", arg0, arg1)
	ret0, _ := ret[0].(*datastore.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserEmailExist indicates an expected call of CheckUserEmailExist
func (mr *MockUserStoreMockRecorder) CheckUserEmailExist(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserEmailExist", reflect.TypeOf((*MockUserStore)(nil).CheckUserEmailExist), arg0, arg1)
}

// GetEmailByID mocks base method
func (m *MockUserStore) GetEmailByID(arg0 context.Context, arg1 float64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmailByID", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmailByID indicates an expected call of GetEmailByID
func (mr *MockUserStoreMockRecorder) GetEmailByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmailByID", reflect.TypeOf((*MockUserStore)(nil).GetEmailByID), arg0, arg1)
}

// GetUserByEmail mocks base method
func (m *MockUserStore) GetUserByEmail(arg0 context.Context, arg1 string) (*datastore.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(*datastore.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail
func (mr *MockUserStoreMockRecorder) GetUserByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserStore)(nil).GetUserByEmail), arg0, arg1)
}

// SoftDeleteUser mocks base method
func (m *MockUserStore) SoftDeleteUser(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoftDeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SoftDeleteUser indicates an expected call of SoftDeleteUser
func (mr *MockUserStoreMockRecorder) SoftDeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftDeleteUser", reflect.TypeOf((*MockUserStore)(nil).SoftDeleteUser), arg0, arg1)
}
