// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aemiralfath/IH-Userland-Onboard/datastore (interfaces: Crypto)

// Package mock_datastore is a generated GoMock package.
package mock_datastore

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCrypto is a mock of Crypto interface
type MockCrypto struct {
	ctrl     *gomock.Controller
	recorder *MockCryptoMockRecorder
}

// MockCryptoMockRecorder is the mock recorder for MockCrypto
type MockCryptoMockRecorder struct {
	mock *MockCrypto
}

// NewMockCrypto creates a new mock instance
func NewMockCrypto(ctrl *gomock.Controller) *MockCrypto {
	mock := &MockCrypto{ctrl: ctrl}
	mock.recorder = &MockCryptoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCrypto) EXPECT() *MockCryptoMockRecorder {
	return m.recorder
}

// ConfirmPassword mocks base method
func (m *MockCrypto) ConfirmPassword(arg0, arg1 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmPassword", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ConfirmPassword indicates an expected call of ConfirmPassword
func (mr *MockCryptoMockRecorder) ConfirmPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmPassword", reflect.TypeOf((*MockCrypto)(nil).ConfirmPassword), arg0, arg1)
}

// GenerateOTP mocks base method
func (m *MockCrypto) GenerateOTP(arg0 int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateOTP", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateOTP indicates an expected call of GenerateOTP
func (mr *MockCryptoMockRecorder) GenerateOTP(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateOTP", reflect.TypeOf((*MockCrypto)(nil).GenerateOTP), arg0)
}

// HashPassword mocks base method
func (m *MockCrypto) HashPassword(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashPassword indicates an expected call of HashPassword
func (mr *MockCryptoMockRecorder) HashPassword(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockCrypto)(nil).HashPassword), arg0)
}
