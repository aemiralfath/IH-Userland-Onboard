// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aemiralfath/IH-Userland-Onboard/datastore (interfaces: SessionStore)

// Package mock_datastore is a generated GoMock package.
package mock_datastore

import (
	context "context"
	datastore "github.com/aemiralfath/IH-Userland-Onboard/datastore"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSessionStore is a mock of SessionStore interface
type MockSessionStore struct {
	ctrl     *gomock.Controller
	recorder *MockSessionStoreMockRecorder
}

// MockSessionStoreMockRecorder is the mock recorder for MockSessionStore
type MockSessionStoreMockRecorder struct {
	mock *MockSessionStore
}

// NewMockSessionStore creates a new mock instance
func NewMockSessionStore(ctrl *gomock.Controller) *MockSessionStore {
	mock := &MockSessionStore{ctrl: ctrl}
	mock.recorder = &MockSessionStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSessionStore) EXPECT() *MockSessionStoreMockRecorder {
	return m.recorder
}

// AddNewSession mocks base method
func (m *MockSessionStore) AddNewSession(arg0 context.Context, arg1 *datastore.Session, arg2 float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewSession", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNewSession indicates an expected call of AddNewSession
func (mr *MockSessionStoreMockRecorder) AddNewSession(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewSession", reflect.TypeOf((*MockSessionStore)(nil).AddNewSession), arg0, arg1, arg2)
}

// DeleteOtherSession mocks base method
func (m *MockSessionStore) DeleteOtherSession(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOtherSession", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOtherSession indicates an expected call of DeleteOtherSession
func (mr *MockSessionStoreMockRecorder) DeleteOtherSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOtherSession", reflect.TypeOf((*MockSessionStore)(nil).DeleteOtherSession), arg0, arg1)
}

// EndSession mocks base method
func (m *MockSessionStore) EndSession(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EndSession", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EndSession indicates an expected call of EndSession
func (mr *MockSessionStoreMockRecorder) EndSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndSession", reflect.TypeOf((*MockSessionStore)(nil).EndSession), arg0, arg1)
}

// GetUserSession mocks base method
func (m *MockSessionStore) GetUserSession(arg0 context.Context, arg1 float64) ([]datastore.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSession", arg0, arg1)
	ret0, _ := ret[0].([]datastore.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSession indicates an expected call of GetUserSession
func (mr *MockSessionStoreMockRecorder) GetUserSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSession", reflect.TypeOf((*MockSessionStore)(nil).GetUserSession), arg0, arg1)
}
