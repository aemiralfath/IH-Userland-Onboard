// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aemiralfath/IH-Userland-Onboard/api/kafka (interfaces: Kafka)

// Package mock_kafka is a generated GoMock package.
package mock_kafka

import (
	kafka "github.com/confluentinc/confluent-kafka-go/kafka"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockKafka is a mock of Kafka interface
type MockKafka struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaMockRecorder
}

// MockKafkaMockRecorder is the mock recorder for MockKafka
type MockKafkaMockRecorder struct {
	mock *MockKafka
}

// NewMockKafka creates a new mock instance
func NewMockKafka(ctrl *gomock.Controller) *MockKafka {
	mock := &MockKafka{ctrl: ctrl}
	mock.recorder = &MockKafkaMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKafka) EXPECT() *MockKafkaMockRecorder {
	return m.recorder
}

// NewConsumer mocks base method
func (m *MockKafka) NewConsumer() (*kafka.Consumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewConsumer")
	ret0, _ := ret[0].(*kafka.Consumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewConsumer indicates an expected call of NewConsumer
func (mr *MockKafkaMockRecorder) NewConsumer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewConsumer", reflect.TypeOf((*MockKafka)(nil).NewConsumer))
}

// NewProducer mocks base method
func (m *MockKafka) NewProducer() (*kafka.Producer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewProducer")
	ret0, _ := ret[0].(*kafka.Producer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewProducer indicates an expected call of NewProducer
func (mr *MockKafkaMockRecorder) NewProducer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewProducer", reflect.TypeOf((*MockKafka)(nil).NewProducer))
}

// Produce mocks base method
func (m *MockKafka) Produce(arg0 *kafka.Producer, arg1 string, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Produce", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Produce indicates an expected call of Produce
func (mr *MockKafkaMockRecorder) Produce(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Produce", reflect.TypeOf((*MockKafka)(nil).Produce), arg0, arg1, arg2)
}
