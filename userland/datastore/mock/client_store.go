// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aemiralfath/IH-Userland-Onboard/datastore (interfaces: ClientStore)

// Package mock_datastore is a generated GoMock package.
package mock_datastore

import (
	context "context"
	datastore "github.com/aemiralfath/IH-Userland-Onboard/userland/datastore"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockClientStore is a mock of ClientStore interface
type MockClientStore struct {
	ctrl     *gomock.Controller
	recorder *MockClientStoreMockRecorder
}

// MockClientStoreMockRecorder is the mock recorder for MockClientStore
type MockClientStoreMockRecorder struct {
	mock *MockClientStore
}

// NewMockClientStore creates a new mock instance
func NewMockClientStore(ctrl *gomock.Controller) *MockClientStore {
	mock := &MockClientStore{ctrl: ctrl}
	mock.recorder = &MockClientStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClientStore) EXPECT() *MockClientStoreMockRecorder {
	return m.recorder
}

// AddNewClient mocks base method
func (m *MockClientStore) AddNewClient(arg0 context.Context, arg1 string) (*datastore.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewClient", arg0, arg1)
	ret0, _ := ret[0].(*datastore.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNewClient indicates an expected call of AddNewClient
func (mr *MockClientStoreMockRecorder) AddNewClient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewClient", reflect.TypeOf((*MockClientStore)(nil).AddNewClient), arg0, arg1)
}

// GetClientByName mocks base method
func (m *MockClientStore) GetClientByName(arg0 context.Context, arg1 string) (*datastore.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientByName", arg0, arg1)
	ret0, _ := ret[0].(*datastore.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientByName indicates an expected call of GetClientByName
func (mr *MockClientStoreMockRecorder) GetClientByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientByName", reflect.TypeOf((*MockClientStore)(nil).GetClientByName), arg0, arg1)
}
