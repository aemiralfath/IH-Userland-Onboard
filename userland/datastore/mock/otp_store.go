// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aemiralfath/IH-Userland-Onboard/datastore (interfaces: OTPStore)

// Package mock_datastore is a generated GoMock package.
package mock_datastore

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockOTPStore is a mock of OTPStore interface
type MockOTPStore struct {
	ctrl     *gomock.Controller
	recorder *MockOTPStoreMockRecorder
}

// MockOTPStoreMockRecorder is the mock recorder for MockOTPStore
type MockOTPStoreMockRecorder struct {
	mock *MockOTPStore
}

// NewMockOTPStore creates a new mock instance
func NewMockOTPStore(ctrl *gomock.Controller) *MockOTPStore {
	mock := &MockOTPStore{ctrl: ctrl}
	mock.recorder = &MockOTPStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOTPStore) EXPECT() *MockOTPStoreMockRecorder {
	return m.recorder
}

// GetOTP mocks base method
func (m *MockOTPStore) GetOTP(arg0 context.Context, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOTP", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOTP indicates an expected call of GetOTP
func (mr *MockOTPStoreMockRecorder) GetOTP(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOTP", reflect.TypeOf((*MockOTPStore)(nil).GetOTP), arg0, arg1, arg2)
}

// SetOTP mocks base method
func (m *MockOTPStore) SetOTP(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOTP", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOTP indicates an expected call of SetOTP
func (mr *MockOTPStoreMockRecorder) SetOTP(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOTP", reflect.TypeOf((*MockOTPStore)(nil).SetOTP), arg0, arg1, arg2, arg3)
}
