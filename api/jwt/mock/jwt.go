// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aemiralfath/IH-Userland-Onboard/api/jwt (interfaces: JWT)

// Package mock_jwt is a generated GoMock package.
package mock_jwt

import (
	context "context"
	jwt "github.com/aemiralfath/IH-Userland-Onboard/api/jwt"
	gomock "github.com/golang/mock/gomock"
	jwt0 "github.com/lestrrat-go/jwx/jwt"
	http "net/http"
	reflect "reflect"
)

// MockJWT is a mock of JWT interface
type MockJWT struct {
	ctrl     *gomock.Controller
	recorder *MockJWTMockRecorder
}

// MockJWTMockRecorder is the mock recorder for MockJWT
type MockJWTMockRecorder struct {
	mock *MockJWT
}

// NewMockJWT creates a new mock instance
func NewMockJWT(ctrl *gomock.Controller) *MockJWT {
	mock := &MockJWT{ctrl: ctrl}
	mock.recorder = &MockJWTMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockJWT) EXPECT() *MockJWTMockRecorder {
	return m.recorder
}

// Authenticator mocks base method
func (m *MockJWT) Authenticator(arg0 http.Handler) http.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticator", arg0)
	ret0, _ := ret[0].(http.Handler)
	return ret0
}

// Authenticator indicates an expected call of Authenticator
func (mr *MockJWTMockRecorder) Authenticator(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticator", reflect.TypeOf((*MockJWT)(nil).Authenticator), arg0)
}

// CreateToken mocks base method
func (m *MockJWT) CreateToken(arg0 float64, arg1 string, arg2 int) (*jwt.Token, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", arg0, arg1, arg2)
	ret0, _ := ret[0].(*jwt.Token)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateToken indicates an expected call of CreateToken
func (mr *MockJWTMockRecorder) CreateToken(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockJWT)(nil).CreateToken), arg0, arg1, arg2)
}

// FromContext mocks base method
func (m *MockJWT) FromContext(arg0 context.Context) (jwt0.Token, map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FromContext", arg0)
	ret0, _ := ret[0].(jwt0.Token)
	ret1, _ := ret[1].(map[string]interface{})
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FromContext indicates an expected call of FromContext
func (mr *MockJWTMockRecorder) FromContext(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromContext", reflect.TypeOf((*MockJWT)(nil).FromContext), arg0)
}

// Verifier mocks base method
func (m *MockJWT) Verifier() func(http.Handler) http.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verifier")
	ret0, _ := ret[0].(func(http.Handler) http.Handler)
	return ret0
}

// Verifier indicates an expected call of Verifier
func (mr *MockJWTMockRecorder) Verifier() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verifier", reflect.TypeOf((*MockJWT)(nil).Verifier))
}

// Verify mocks base method
func (m *MockJWT) Verify(arg0 ...func(*http.Request) string) func(http.Handler) http.Handler {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Verify", varargs...)
	ret0, _ := ret[0].(func(http.Handler) http.Handler)
	return ret0
}

// Verify indicates an expected call of Verify
func (mr *MockJWTMockRecorder) Verify(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockJWT)(nil).Verify), arg0...)
}

// VerifyRequest mocks base method
func (m *MockJWT) VerifyRequest(arg0 *http.Request, arg1 ...func(*http.Request) string) (jwt0.Token, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VerifyRequest", varargs...)
	ret0, _ := ret[0].(jwt0.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyRequest indicates an expected call of VerifyRequest
func (mr *MockJWTMockRecorder) VerifyRequest(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyRequest", reflect.TypeOf((*MockJWT)(nil).VerifyRequest), varargs...)
}

// VerifyToken mocks base method
func (m *MockJWT) VerifyToken(arg0 string) (jwt0.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", arg0)
	ret0, _ := ret[0].(jwt0.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyToken indicates an expected call of VerifyToken
func (mr *MockJWTMockRecorder) VerifyToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockJWT)(nil).VerifyToken), arg0)
}
